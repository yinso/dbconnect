// Generated by CoffeeScript 1.4.0
(function() {
  var DBConnect, EventEmitter, uuid, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ = require('underscore');

  uuid = require('./uuid');

  EventEmitter = require('events').EventEmitter;

  DBConnect = (function(_super) {

    __extends(DBConnect, _super);

    DBConnect.connTypes = {};

    DBConnect.uuid = uuid.v4;

    DBConnect.register = function(type, connector) {
      if (this.connTypes.hasOwnProperty(type)) {
        throw new Error("DBConnect.register_type_exists: " + type);
      }
      return this.connTypes[type] = connector;
    };

    DBConnect.hasType = function(type) {
      if (this.connTypes.hasOwnProperty(type)) {
        return this.connTypes[type];
      } else {
        return void 0;
      }
    };

    DBConnect.inners = {};

    DBConnect.has = function(name) {
      if (this.inners.hasOwnProperty(name)) {
        return this.inners[name];
      } else {
        return void 0;
      }
    };

    DBConnect.setup = function(args) {
      if (this.inners.hasOwnProperty(args.name)) {
        throw new Error("DBConnect.setup_connection_exists: " + args.name);
      }
      if (!this.connTypes.hasOwnProperty(args.type)) {
        throw new Error("DBConnect.unknown_type: " + args.type);
      }
      this.inners[args.name] = args;
      if (args.hasOwnProperty('module')) {
        return args.loader = require(args.module);
      }
    };

    DBConnect.make = function(args) {
      var type;
      if (!this.inners.hasOwnProperty(args)) {
        throw new Error("DBConnect.unknownSetup: " + args);
      } else {
        args = this.inners[args];
        type = this.connTypes[args.type];
        return new type(args);
      }
    };

    DBConnect.defaultOptions = {};

    function DBConnect(args) {
      this.args = _.extend({}, this.constructor.defaultOptions, args);
      this.prepared = {};
      this.currentUser = null;
      this.loadModule();
    }

    DBConnect.prototype.loadModule = function(loader) {
      var key, val, _results;
      if (loader == null) {
        loader = this.args.loader;
      }
      if (loader instanceof Function) {
        return loader(this);
      } else if (loader instanceof Object) {
        _results = [];
        for (key in loader) {
          val = loader[key];
          if (loader.hasOwnProperty(key)) {
            if (val instanceof Function) {
              _results.push(this.prepare(key, val));
            } else {
              _results.push(this.prepareSpecial(key, val));
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {

      }
    };

    DBConnect.prototype.connect = function(cb) {};

    DBConnect.prototype.query = function(stmt, args, cb) {
      if (this.prepared.hasOwnProperty(stmt)) {
        return this.prepared[stmt](this, args, cb);
      } else {
        return this._query.apply(this, arguments);
      }
    };

    DBConnect.prototype.prepare = function(key, func) {
      if (this.prepared.hasOwnProperty(key)) {
        throw new Error("" + this.constructor.name + ".duplicate_prepare_stmt: " + key);
      }
      if (this.hasOwnProperty(key)) {
        throw new Error("" + this.constructor.name + ".duplicate_prepare_stmt: " + key);
      }
      if (func instanceof Function) {
        this.prepared[key] = func;
        return this[key] = func;
      } else {
        throw new Error("" + this.constructor.name + ".invalid_prepare_stmt_not_a_function: " + func);
      }
    };

    DBConnect.prototype.prepareSpecial = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.prepare.apply(this, args);
    };

    DBConnect.prototype.disconnect = function(cb) {};

    DBConnect.prototype.open = function(cb) {
      return this.connect(cb);
    };

    DBConnect.prototype.close = function(cb) {
      return this.disconnect(cb);
    };

    DBConnect.prototype.uuid = uuid.v4;

    return DBConnect;

  })(EventEmitter);

  module.exports = DBConnect;

}).call(this);
